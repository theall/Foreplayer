#include "splitter.h"

TSplitterHandle::TSplitterHandle(QSplitter *parent) :
    QSplitterHandle(Qt::Horizontal, parent),
    mBtnExpand(new TImageButton(this))
{
    QVBoxLayout *layout = new QVBoxLayout(this);
    layout->addWidget(mBtnExpand);
}

void TSplitterHandle::setPixmap(QPixmap pixmap)
{
    mBtnExpand->setPixmap(pixmap);
}

void TSplitterHandle::paintEvent(QPaintEvent *event)
{
    QPainter painter(this);
    QPolygonF triangle;
    QPainterPath trianglePath;
    QRect rt = rect();

    int left = rt.left();
    int middle = rt.left() + rt.width() / 2;
    triangle.append(QPoint(left, middle-2));
    triangle.append(QPoint(left, middle));
    triangle.append(QPoint(left, middle+2));

    rt.adjust(2, 2, -2, -2);
    painter.setPen(QColor(Qt::red));
    painter.drawRect(rt);
    rt.adjust(2, 2, -2, -2);

    painter.fillRect(rt, QBrush(Qt::green));

    trianglePath.addPolygon(triangle);

    painter.fillPath(trangle, QBrush(Qt::red));

    QSplitterHandle::paintEvent(event);
}

// ---------------------------------------------------------------------------------
TSplitter::TSplitter(QWidget *parent) :
    QSplitter(Qt::Horizontal, parent)
{
//    QSizePolicy* sizePolicy = new QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
//    sizePolicy->setHorizontalStretch(90);
//    sizePolicy->setVerticalStretch(0);
//    sizePolicy->setHeightForWidth(false);
//    setSizePolicy(*sizePolicy);
    setChildrenCollapsible(true);
}

QSplitterHandle *TSplitter::createHandle()
{
    return new TSplitterHandle(this);
}
